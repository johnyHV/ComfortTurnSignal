
trippling_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000414  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000414  00000488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  00000510  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fd2  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083d  00000000  00000000  00001642  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b6c  00000000  00000000  00001e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  000029ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053d  00000000  00000000  00002b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000405  00000000  00000000  000030a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000034ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	69 c0       	rjmp	.+210    	; 0xd8 <__vector_2>
   6:	53 c0       	rjmp	.+166    	; 0xae <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	58 c0       	rjmp	.+176    	; 0xc4 <__vector_9>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e4 e1       	ldi	r30, 0x14	; 20
  32:	f4 e0       	ldi	r31, 0x04	; 4
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	aa 37       	cpi	r26, 0x7A	; 122
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	aa e7       	ldi	r26, 0x7A	; 122
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	aa 37       	cpi	r26, 0x7A	; 122
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	0f d0       	rcall	.+30     	; 0x70 <main>
  52:	de c1       	rjmp	.+956    	; 0x410 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <initGpioPin>:
 *  @return void
*/
void initGpioPin(void)
{
	// Output pin
	DDRB |= (1 << RELE_LEFT);
  56:	bc 9a       	sbi	0x17, 4	; 23
	PORTB |= (1 << RELE_LEFT);
  58:	c4 9a       	sbi	0x18, 4	; 24
	PORTB &= ~(1 << RELE_LEFT);   // RELE off
  5a:	c4 98       	cbi	0x18, 4	; 24
	
	DDRB |= (1 << RELE_RIGHT);
  5c:	bb 9a       	sbi	0x17, 3	; 23
	PORTB |= (1 << RELE_RIGHT);
  5e:	c3 9a       	sbi	0x18, 3	; 24
	PORTB &= ~(1 << RELE_RIGHT);   // RELE off
  60:	c3 98       	cbi	0x18, 3	; 24
	
	// Input pin
	DDRB &= ~(1 << INPUT_LEFT);    // switch on (INPUT_LEFT)
  62:	ba 98       	cbi	0x17, 2	; 23
	PORTB |= (1 << INPUT_LEFT);    // enable pull-up resistor
  64:	c2 9a       	sbi	0x18, 2	; 24
	
	DDRB &= ~(1 << INPUT_RIGHT);    // switch on (INPUT_LEFT)
  66:	b9 98       	cbi	0x17, 1	; 23
	PORTB |= (1 << INPUT_RIGHT);    // enable pull-up resistor
  68:	c1 9a       	sbi	0x18, 1	; 24
	
	DDRB &= ~(1 << INPUT_SET_BUTTON);    // switch on (INPUT_SET_BUTTON)
  6a:	b8 98       	cbi	0x17, 0	; 23
	PORTB |= (1 << INPUT_SET_BUTTON);    // enable pull-up resistor
  6c:	c0 9a       	sbi	0x18, 0	; 24
  6e:	08 95       	ret

00000070 <main>:
#include "Task.h"
#include "Variable.h"

int main(void)
{
	MCUSR = 0;
  70:	14 be       	out	0x34, r1	; 52
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
  72:	0f b6       	in	r0, 0x3f	; 63
  74:	f8 94       	cli
  76:	a8 95       	wdr
  78:	81 b5       	in	r24, 0x21	; 33
  7a:	88 61       	ori	r24, 0x18	; 24
  7c:	81 bd       	out	0x21, r24	; 33
  7e:	11 bc       	out	0x21, r1	; 33
  80:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	
	initGpioPin();
  82:	e9 df       	rcall	.-46     	; 0x56 <initGpioPin>
	//initTimer1();
	//initInterrupt();
	//WriteTime(TimeForFlashing); // For manual first init Time 
	#if (EEPROM_ENABLE == 1)
	ReadTime();
  84:	fd d0       	rcall	.+506    	; 0x280 <ReadTime>
	CheckSetButton();
  86:	1f d1       	rcall	.+574    	; 0x2c6 <CheckSetButton>
	#endif
	
	wdt_reset();
  88:	a8 95       	wdr
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
  8a:	9e e0       	ldi	r25, 0x0E	; 14
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	f8 94       	cli
  92:	a8 95       	wdr
  94:	81 bd       	out	0x21, r24	; 33
  96:	0f be       	out	0x3f, r0	; 63
  98:	91 bd       	out	0x21, r25	; 33
	wdt_enable(WDTO_1S);
	
	while(1)
	{
		CheckButton();
  9a:	e3 d0       	rcall	.+454    	; 0x262 <CheckButton>
		Flashing();
  9c:	6d d0       	rcall	.+218    	; 0x178 <Flashing>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	8f e0       	ldi	r24, 0x0F	; 15
  a0:	97 e2       	ldi	r25, 0x27	; 39
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x32>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x38>
  a8:	00 00       	nop
		_delay_ms(REFRESH_TIME);
		wdt_reset();
  aa:	a8 95       	wdr
  ac:	f6 cf       	rjmp	.-20     	; 0x9a <main+0x2a>

000000ae <__vector_3>:
 *
 *  @param TIMER1_COMPA_vect
 *  @return void
*/
ISR(TIMER1_COMPA_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
	//PINB |= _BV(PINB4);         //flash the LED by toggling PB4
	TCNT1 = 0;
  b8:	1f bc       	out	0x2f, r1	; 47
}
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <__vector_9>:
 *
 *  @param TIMER1_COMPB_vect
 *  @return void
*/
ISR(TIMER1_COMPB_vect)
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
	//PINB |= _BV(PINB3);
}
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <__vector_2>:
 *
 *  @param PCINT0_vect
 *  @return void
*/
ISR(PCINT0_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
	/* GPIO interrupt */
}
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <FlashingLed>:
 *
 *  @param Light - struct with configuration for specific bulb
 *  @return void
*/
void FlashingLed(struct DirectionalLight *Light)
{
  ec:	fc 01       	movw	r30, r24
	if (Light->EnableFlashing == TRUE)
  ee:	84 81       	ldd	r24, Z+4	; 0x04
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	09 f0       	breq	.+2      	; 0xf6 <FlashingLed+0xa>
  f4:	40 c0       	rjmp	.+128    	; 0x176 <FlashingLed+0x8a>
	{
		if (Light->CounterFlashing < BLINK_INTERVAL)
  f6:	20 81       	ld	r18, Z
  f8:	23 30       	cpi	r18, 0x03	; 3
  fa:	e8 f5       	brcc	.+122    	; 0x176 <FlashingLed+0x8a>
		{
			Light->TimerCounterFlashing++;
  fc:	81 81       	ldd	r24, Z+1	; 0x01
  fe:	92 81       	ldd	r25, Z+2	; 0x02
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	92 83       	std	Z+2, r25	; 0x02
 104:	81 83       	std	Z+1, r24	; 0x01
			
			if (Light->StatusFlashing == BULB_ON)
 106:	33 81       	ldd	r19, Z+3	; 0x03
 108:	31 30       	cpi	r19, 0x01	; 1
 10a:	b1 f4       	brne	.+44     	; 0x138 <FlashingLed+0x4c>
			{
				if (Light->TimerCounterFlashing > TimeForFlashing)
 10c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <TimeForFlashing>
 110:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <TimeForFlashing+0x1>
 114:	28 17       	cp	r18, r24
 116:	39 07       	cpc	r19, r25
 118:	70 f5       	brcc	.+92     	; 0x176 <FlashingLed+0x8a>
				{
					Light->TimerCounterFlashing = 0;
 11a:	12 82       	std	Z+2, r1	; 0x02
 11c:	11 82       	std	Z+1, r1	; 0x01
					Light->StatusFlashing = BULB_OFF;
 11e:	13 82       	std	Z+3, r1	; 0x03
					PORTB |= (1 << Light->Led);		// Rele On
 120:	28 b3       	in	r18, 0x18	; 24
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	00 84       	ldd	r0, Z+8	; 0x08
 128:	02 c0       	rjmp	.+4      	; 0x12e <FlashingLed+0x42>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	0a 94       	dec	r0
 130:	e2 f7       	brpl	.-8      	; 0x12a <FlashingLed+0x3e>
 132:	82 2b       	or	r24, r18
 134:	88 bb       	out	0x18, r24	; 24
					return;
 136:	08 95       	ret
				}
			}
			
			if (Light->StatusFlashing == BULB_OFF)
 138:	31 11       	cpse	r19, r1
 13a:	1d c0       	rjmp	.+58     	; 0x176 <FlashingLed+0x8a>
			{
				if (Light->TimerCounterFlashing > TimeForFlashing)
 13c:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <TimeForFlashing>
 140:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <TimeForFlashing+0x1>
 144:	48 17       	cp	r20, r24
 146:	59 07       	cpc	r21, r25
 148:	b0 f4       	brcc	.+44     	; 0x176 <FlashingLed+0x8a>
				{
					Light->TimerCounterFlashing = 0;
 14a:	12 82       	std	Z+2, r1	; 0x02
 14c:	11 82       	std	Z+1, r1	; 0x01
					Light->StatusFlashing = BULB_ON;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	83 83       	std	Z+3, r24	; 0x03
					Light->CounterFlashing++;
 152:	2f 5f       	subi	r18, 0xFF	; 255
 154:	20 83       	st	Z, r18
					
					if (Light->CounterFlashing == BLINK_INTERVAL)
 156:	23 30       	cpi	r18, 0x03	; 3
 158:	11 f4       	brne	.+4      	; 0x15e <FlashingLed+0x72>
					{
						Light->EnableFlashing = FALSE;
 15a:	14 82       	std	Z+4, r1	; 0x04
						Light->CounterFlashing = 0;
 15c:	10 82       	st	Z, r1
					}
					
					PORTB &= ~(1 << Light->Led);   // Rele Offf
 15e:	28 b3       	in	r18, 0x18	; 24
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	00 84       	ldd	r0, Z+8	; 0x08
 166:	02 c0       	rjmp	.+4      	; 0x16c <FlashingLed+0x80>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <FlashingLed+0x7c>
 170:	80 95       	com	r24
 172:	82 23       	and	r24, r18
 174:	88 bb       	out	0x18, r24	; 24
 176:	08 95       	ret

00000178 <Flashing>:
 *  @param void
 *  @return void
*/
void Flashing(void)
{
	FlashingLed(&DirectionalLightLeft);
 178:	8e e6       	ldi	r24, 0x6E	; 110
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	b7 df       	rcall	.-146    	; 0xec <FlashingLed>
	FlashingLed(&DirectionalLightRight);
 17e:	84 e6       	ldi	r24, 0x64	; 100
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	b4 df       	rcall	.-152    	; 0xec <FlashingLed>
 184:	08 95       	ret

00000186 <CheckInput>:
 *  Function for check specific input for actiovation trippling
 *
 *  @param Light - struct with configuration for specific input
 *  @return void
*/
void CheckInput(struct DirectionalLight *Button) {
 186:	fc 01       	movw	r30, r24
	// Check input
	if (!(PINB & (1 << Button->Button))) {
 188:	26 b3       	in	r18, 0x16	; 22
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	01 84       	ldd	r0, Z+9	; 0x09
 18e:	02 c0       	rjmp	.+4      	; 0x194 <CheckInput+0xe>
 190:	35 95       	asr	r19
 192:	27 95       	ror	r18
 194:	0a 94       	dec	r0
 196:	e2 f7       	brpl	.-8      	; 0x190 <CheckInput+0xa>
 198:	20 fd       	sbrc	r18, 0
 19a:	08 c0       	rjmp	.+16     	; 0x1ac <CheckInput+0x26>
		Button->StartTimerCounterUp = TRUE;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	87 83       	std	Z+7, r24	; 0x07
		Button->TimeCountUp++;
 1a0:	85 81       	ldd	r24, Z+5	; 0x05
 1a2:	96 81       	ldd	r25, Z+6	; 0x06
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	96 83       	std	Z+6, r25	; 0x06
 1a8:	85 83       	std	Z+5, r24	; 0x05
 1aa:	08 95       	ret
	}
	else {
		Button->StartTimerCounterUp = FALSE;
 1ac:	17 82       	std	Z+7, r1	; 0x07
		//Button->TimeCountUp = 0;
	}
	
	/* check if is enable flashing, and if is timer OFF */
	if ((Button->EnableFlashing == FALSE) && (Button->StartTimerCounterUp == FALSE)) {
 1ae:	84 81       	ldd	r24, Z+4	; 0x04
 1b0:	88 23       	and	r24, r24
 1b2:	d9 f0       	breq	.+54     	; 0x1ea <CheckInput+0x64>
 1b4:	08 95       	ret
		if ((Button->TimeCountUp > TimeMinimalForEnableAutoFlashing) && (Button->TimeCountUp < TimeForEnableAutoFlashing)) {
 1b6:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <TimeForEnableAutoFlashing>
 1ba:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <TimeForEnableAutoFlashing+0x1>
 1be:	82 17       	cp	r24, r18
 1c0:	93 07       	cpc	r25, r19
 1c2:	48 f4       	brcc	.+18     	; 0x1d6 <CheckInput+0x50>
			Button->EnableFlashing = TRUE;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	84 83       	std	Z+4, r24	; 0x04
			Button->StatusFlashing = BULB_ON;
 1c8:	83 83       	std	Z+3, r24	; 0x03
			Button->TimeCountUp = 0;
 1ca:	16 82       	std	Z+6, r1	; 0x06
 1cc:	15 82       	std	Z+5, r1	; 0x05
			Button->CounterFlashing = 0;
 1ce:	10 82       	st	Z, r1
			Button->TimerCounterFlashing = 0;
 1d0:	12 82       	std	Z+2, r1	; 0x02
 1d2:	11 82       	std	Z+1, r1	; 0x01
 1d4:	08 95       	ret
		} else {
			if (Button->TimeCountUp > TimeForEnableAutoFlashing) {
 1d6:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <TimeForEnableAutoFlashing>
 1da:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <TimeForEnableAutoFlashing+0x1>
 1de:	28 17       	cp	r18, r24
 1e0:	39 07       	cpc	r19, r25
 1e2:	68 f4       	brcc	.+26     	; 0x1fe <CheckInput+0x78>
				Button->TimeCountUp = 0;
 1e4:	16 82       	std	Z+6, r1	; 0x06
 1e6:	15 82       	std	Z+5, r1	; 0x05
			}
		}
	}
}
 1e8:	08 95       	ret
		//Button->TimeCountUp = 0;
	}
	
	/* check if is enable flashing, and if is timer OFF */
	if ((Button->EnableFlashing == FALSE) && (Button->StartTimerCounterUp == FALSE)) {
		if ((Button->TimeCountUp > TimeMinimalForEnableAutoFlashing) && (Button->TimeCountUp < TimeForEnableAutoFlashing)) {
 1ea:	85 81       	ldd	r24, Z+5	; 0x05
 1ec:	96 81       	ldd	r25, Z+6	; 0x06
 1ee:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <TimeMinimalForEnableAutoFlashing>
 1f2:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <TimeMinimalForEnableAutoFlashing+0x1>
 1f6:	28 17       	cp	r18, r24
 1f8:	39 07       	cpc	r19, r25
 1fa:	e8 f2       	brcs	.-70     	; 0x1b6 <CheckInput+0x30>
 1fc:	ec cf       	rjmp	.-40     	; 0x1d6 <CheckInput+0x50>
 1fe:	08 95       	ret

00000200 <SafetyCheck>:
 *  @param void
 *  @return uint8_t - status TRUE - safety disable is activate
							 FALSE - safety disable is not activate
*/
uint8_t SafetyCheck(void)
{
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
	/* Safety disable Right bulb */
	if (!(PINB & (1 << INPUT_LEFT)))
 204:	b2 99       	sbic	0x16, 2	; 22
 206:	11 c0       	rjmp	.+34     	; 0x22a <SafetyCheck+0x2a>
	{
		if (DirectionalLightRight.EnableFlashing == TRUE)
 208:	c0 91 68 00 	lds	r28, 0x0068	; 0x800068 <DirectionalLightRight+0x4>
 20c:	c1 30       	cpi	r28, 0x01	; 1
 20e:	69 f4       	brne	.+26     	; 0x22a <SafetyCheck+0x2a>
		{
			ClearStruct();
 210:	b0 d0       	rcall	.+352    	; 0x372 <ClearStruct>
			PORTB &= ~(1 << RELE_RIGHT);   // Rele Offf
 212:	c3 98       	cbi	0x18, 3	; 24
			PORTB &= ~(1 << RELE_LEFT);   // Rele Offf
 214:	c4 98       	cbi	0x18, 4	; 24
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	84 e3       	ldi	r24, 0x34	; 52
 21a:	9c e0       	ldi	r25, 0x0C	; 12
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <SafetyCheck+0x1c>
 224:	00 c0       	rjmp	.+0      	; 0x226 <SafetyCheck+0x26>
 226:	00 00       	nop
			_delay_ms(SAFETY_DELAY);
			return TRUE;
 228:	18 c0       	rjmp	.+48     	; 0x25a <SafetyCheck+0x5a>
		}
	}
	
	/* Safety disable Left bulb */
	if (!(PINB & (1 << INPUT_RIGHT)))
 22a:	86 b3       	in	r24, 0x16	; 22
 22c:	c8 2f       	mov	r28, r24
 22e:	c2 70       	andi	r28, 0x02	; 2
 230:	81 fd       	sbrc	r24, 1
 232:	12 c0       	rjmp	.+36     	; 0x258 <SafetyCheck+0x58>
	{
		if (DirectionalLightLeft.EnableFlashing == TRUE)
 234:	d0 91 72 00 	lds	r29, 0x0072	; 0x800072 <DirectionalLightLeft+0x4>
 238:	d1 30       	cpi	r29, 0x01	; 1
 23a:	79 f4       	brne	.+30     	; 0x25a <SafetyCheck+0x5a>
		{
			ClearStruct();
 23c:	9a d0       	rcall	.+308    	; 0x372 <ClearStruct>
			PORTB &= ~(1 << RELE_LEFT);   // Rele Offf
 23e:	c4 98       	cbi	0x18, 4	; 24
			PORTB &= ~(1 << RELE_RIGHT);   // Rele Offf
 240:	c3 98       	cbi	0x18, 3	; 24
 242:	2f ef       	ldi	r18, 0xFF	; 255
 244:	84 e3       	ldi	r24, 0x34	; 52
 246:	9c e0       	ldi	r25, 0x0C	; 12
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <SafetyCheck+0x48>
 250:	00 c0       	rjmp	.+0      	; 0x252 <SafetyCheck+0x52>
 252:	00 00       	nop
			_delay_ms(SAFETY_DELAY);
			return TRUE;
 254:	cd 2f       	mov	r28, r29
 256:	01 c0       	rjmp	.+2      	; 0x25a <SafetyCheck+0x5a>
		}
	}
	
	return FALSE;
 258:	c0 e0       	ldi	r28, 0x00	; 0
}
 25a:	8c 2f       	mov	r24, r28
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <CheckButton>:
 *  @param void
 *  @return void
*/
void CheckButton(void)
{
	if (SafetyCheck() == FALSE)
 262:	ce df       	rcall	.-100    	; 0x200 <SafetyCheck>
 264:	81 11       	cpse	r24, r1
 266:	06 c0       	rjmp	.+12     	; 0x274 <CheckButton+0x12>
	{
		CheckInput(&DirectionalLightLeft);
 268:	8e e6       	ldi	r24, 0x6E	; 110
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	8c df       	rcall	.-232    	; 0x186 <CheckInput>
		CheckInput(&DirectionalLightRight);
 26e:	84 e6       	ldi	r24, 0x64	; 100
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	89 df       	rcall	.-238    	; 0x186 <CheckInput>
 274:	08 95       	ret

00000276 <WriteTime>:
 *  @param CycleTime - Value for write to EEPROM
 *  @return void
*/
void WriteTime(uint16_t CycleTime)
{
	eeprom_write_word(EEPROM_TIME_FLASHING, CycleTime);
 276:	bc 01       	movw	r22, r24
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	a8 d0       	rcall	.+336    	; 0x3ce <eeprom_write_word>
 27e:	08 95       	ret

00000280 <ReadTime>:
 *  @param void
 *  @return void
*/
void ReadTime(void)
{
	TimeForFlashing = eeprom_read_word(EEPROM_TIME_FLASHING);
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	9f d0       	rcall	.+318    	; 0x3c4 <eeprom_read_word>
 286:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <TimeForFlashing+0x1>
 28a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <TimeForFlashing>
	TimeForEnableAutoFlashing = (uint16_t) (((TimeForFlashing * REFRESH_TIME) / 100) * 80);
 28e:	9c 01       	movw	r18, r24
 290:	22 0f       	add	r18, r18
 292:	33 1f       	adc	r19, r19
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	82 0f       	add	r24, r18
 29a:	93 1f       	adc	r25, r19
 29c:	64 e6       	ldi	r22, 0x64	; 100
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	7d d0       	rcall	.+250    	; 0x39c <__udivmodhi4>
 2a2:	cb 01       	movw	r24, r22
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	68 0f       	add	r22, r24
 2ae:	79 1f       	adc	r23, r25
 2b0:	62 95       	swap	r22
 2b2:	72 95       	swap	r23
 2b4:	70 7f       	andi	r23, 0xF0	; 240
 2b6:	76 27       	eor	r23, r22
 2b8:	60 7f       	andi	r22, 0xF0	; 240
 2ba:	76 27       	eor	r23, r22
 2bc:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <TimeForEnableAutoFlashing+0x1>
 2c0:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <TimeForEnableAutoFlashing>
 2c4:	08 95       	ret

000002c6 <CheckSetButton>:
uint8_t CheckSetButton()
{
	/* safety check, if si realy enable configuration jumper, waiting time is 500mS */
	for (uint8_t i=0; i < 10 ;i++) 
	{
		if (PINB & (1 << INPUT_SET_BUTTON)) 
 2c6:	86 b3       	in	r24, 0x16	; 22
 2c8:	98 2f       	mov	r25, r24
 2ca:	91 70       	andi	r25, 0x01	; 1
 2cc:	80 ff       	sbrs	r24, 0
 2ce:	45 c0       	rjmp	.+138    	; 0x35a <CheckSetButton+0x94>
 2d0:	40 c0       	rjmp	.+128    	; 0x352 <CheckSetButton+0x8c>
 2d2:	b0 99       	sbic	0x16, 0	; 22
 2d4:	40 c0       	rjmp	.+128    	; 0x356 <CheckSetButton+0x90>
 2d6:	2f e7       	ldi	r18, 0x7F	; 127
 2d8:	38 e3       	ldi	r19, 0x38	; 56
 2da:	41 e0       	ldi	r20, 0x01	; 1
 2dc:	21 50       	subi	r18, 0x01	; 1
 2de:	30 40       	sbci	r19, 0x00	; 0
 2e0:	40 40       	sbci	r20, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <CheckSetButton+0x16>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <CheckSetButton+0x20>
 2e6:	00 00       	nop
 2e8:	81 50       	subi	r24, 0x01	; 1
 *  @return uint8_t
*/
uint8_t CheckSetButton()
{
	/* safety check, if si realy enable configuration jumper, waiting time is 500mS */
	for (uint8_t i=0; i < 10 ;i++) 
 2ea:	99 f7       	brne	.-26     	; 0x2d2 <CheckSetButton+0xc>
			return 0;
		}
		_delay_ms(50);
	}
	
	if (!(PINB & (1 << INPUT_SET_BUTTON)))
 2ec:	b0 99       	sbic	0x16, 0	; 22
 2ee:	40 c0       	rjmp	.+128    	; 0x370 <CheckSetButton+0xaa>
	{
		uint8_t InitialStatusLeft = (PINB & (1 << INPUT_LEFT));
 2f0:	66 b3       	in	r22, 0x16	; 22
 2f2:	64 70       	andi	r22, 0x04	; 4
		uint8_t InitialStatusRight = (PINB & (1 << INPUT_RIGHT));
 2f4:	46 b3       	in	r20, 0x16	; 22
 2f6:	42 70       	andi	r20, 0x02	; 2
		uint16_t BulbStatusCycle = 0;
		uint8_t StartCounter = FALSE;
 2f8:	e0 e0       	ldi	r30, 0x00	; 0
	
	if (!(PINB & (1 << INPUT_SET_BUTTON)))
	{
		uint8_t InitialStatusLeft = (PINB & (1 << INPUT_LEFT));
		uint8_t InitialStatusRight = (PINB & (1 << INPUT_RIGHT));
		uint16_t BulbStatusCycle = 0;
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
		uint8_t StartCounter = FALSE;
	
		while (1)
		{
			if ((InitialStatusLeft != (PINB & (1 << INPUT_LEFT))) || (InitialStatusRight != (PINB & (1 << INPUT_RIGHT))))
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	f1 e0       	ldi	r31, 0x01	; 1
 302:	50 e0       	ldi	r21, 0x00	; 0
 304:	26 b3       	in	r18, 0x16	; 22
 306:	24 70       	andi	r18, 0x04	; 4
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	62 17       	cp	r22, r18
 30c:	73 07       	cpc	r23, r19
 30e:	31 f4       	brne	.+12     	; 0x31c <CheckSetButton+0x56>
 310:	26 b3       	in	r18, 0x16	; 22
 312:	22 70       	andi	r18, 0x02	; 2
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	42 17       	cp	r20, r18
 318:	53 07       	cpc	r21, r19
 31a:	41 f0       	breq	.+16     	; 0x32c <CheckSetButton+0x66>
			{
				BulbStatusCycle++;
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	af e0       	ldi	r26, 0x0F	; 15
 320:	b7 e2       	ldi	r27, 0x27	; 39
 322:	11 97       	sbiw	r26, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <CheckSetButton+0x5c>
 326:	00 c0       	rjmp	.+0      	; 0x328 <CheckSetButton+0x62>
 328:	00 00       	nop
 32a:	02 c0       	rjmp	.+4      	; 0x330 <CheckSetButton+0x6a>
				StartCounter = TRUE;
				_delay_ms(REFRESH_TIME);
			}
			
			if ((StartCounter == TRUE) && ((InitialStatusLeft == (PINB & (1 << INPUT_LEFT)))) || (InitialStatusRight == (PINB & (1 << INPUT_RIGHT))))
 32c:	e1 30       	cpi	r30, 0x01	; 1
 32e:	39 f4       	brne	.+14     	; 0x33e <CheckSetButton+0x78>
 330:	26 b3       	in	r18, 0x16	; 22
 332:	24 70       	andi	r18, 0x04	; 4
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	62 17       	cp	r22, r18
 338:	73 07       	cpc	r23, r19
 33a:	39 f0       	breq	.+14     	; 0x34a <CheckSetButton+0x84>
 33c:	ef 2f       	mov	r30, r31
 33e:	26 b3       	in	r18, 0x16	; 22
 340:	22 70       	andi	r18, 0x02	; 2
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	42 17       	cp	r20, r18
 346:	53 07       	cpc	r21, r19
 348:	e9 f6       	brne	.-70     	; 0x304 <CheckSetButton+0x3e>
			{
				WriteTime(BulbStatusCycle);
 34a:	95 df       	rcall	.-214    	; 0x276 <WriteTime>
				while(1)
				{
					ReadTime();
 34c:	99 df       	rcall	.-206    	; 0x280 <ReadTime>
					return 1;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	08 95       	ret
	/* safety check, if si realy enable configuration jumper, waiting time is 500mS */
	for (uint8_t i=0; i < 10 ;i++) 
	{
		if (PINB & (1 << INPUT_SET_BUTTON)) 
		{
			return 0;
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	08 95       	ret
 356:	89 2f       	mov	r24, r25
 358:	08 95       	ret
 35a:	bf e7       	ldi	r27, 0x7F	; 127
 35c:	28 e3       	ldi	r18, 0x38	; 56
 35e:	31 e0       	ldi	r19, 0x01	; 1
 360:	b1 50       	subi	r27, 0x01	; 1
 362:	20 40       	sbci	r18, 0x00	; 0
 364:	30 40       	sbci	r19, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <CheckSetButton+0x9a>
 368:	00 c0       	rjmp	.+0      	; 0x36a <CheckSetButton+0xa4>
 36a:	00 00       	nop
 36c:	89 e0       	ldi	r24, 0x09	; 9
 36e:	b1 cf       	rjmp	.-158    	; 0x2d2 <CheckSetButton+0xc>
			}
		}
	}
	
	return 0;
}
 370:	08 95       	ret

00000372 <ClearStruct>:
uint16_t TimeForEnableAutoFlashing = TIMEOUT_ENABLE_BULB/REFRESH_TIME; 
uint16_t TimeMinimalForEnableAutoFlashing = MIN_TIME_FOR_EN_TRIPP/REFRESH_TIME;
uint16_t TimeForFlashing = TIME_ON_OFF_LENGTH/REFRESH_TIME;

void ClearStruct () {
	DirectionalLightLeft.TimerCounterFlashing = 0;
 372:	ee e6       	ldi	r30, 0x6E	; 110
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	12 82       	std	Z+2, r1	; 0x02
 378:	11 82       	std	Z+1, r1	; 0x01
	DirectionalLightLeft.StatusFlashing = BULB_OFF;
 37a:	13 82       	std	Z+3, r1	; 0x03
	DirectionalLightLeft.EnableFlashing = FALSE;
 37c:	14 82       	std	Z+4, r1	; 0x04
	DirectionalLightLeft.CounterFlashing = 0;
 37e:	10 82       	st	Z, r1
	DirectionalLightLeft.StartTimerCounterUp = 0;
 380:	17 82       	std	Z+7, r1	; 0x07
	DirectionalLightLeft.TimeCountUp = 0;
 382:	16 82       	std	Z+6, r1	; 0x06
 384:	15 82       	std	Z+5, r1	; 0x05
	
	DirectionalLightRight.TimerCounterFlashing = 0;
 386:	e4 e6       	ldi	r30, 0x64	; 100
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	12 82       	std	Z+2, r1	; 0x02
 38c:	11 82       	std	Z+1, r1	; 0x01
	DirectionalLightRight.StatusFlashing = BULB_OFF;
 38e:	13 82       	std	Z+3, r1	; 0x03
	DirectionalLightRight.EnableFlashing = FALSE;
 390:	14 82       	std	Z+4, r1	; 0x04
	DirectionalLightRight.CounterFlashing = 0;
 392:	10 82       	st	Z, r1
	DirectionalLightRight.StartTimerCounterUp = 0;
 394:	17 82       	std	Z+7, r1	; 0x07
	DirectionalLightRight.TimeCountUp = 0;
 396:	16 82       	std	Z+6, r1	; 0x06
 398:	15 82       	std	Z+5, r1	; 0x05
 39a:	08 95       	ret

0000039c <__udivmodhi4>:
 39c:	aa 1b       	sub	r26, r26
 39e:	bb 1b       	sub	r27, r27
 3a0:	51 e1       	ldi	r21, 0x11	; 17
 3a2:	07 c0       	rjmp	.+14     	; 0x3b2 <__udivmodhi4_ep>

000003a4 <__udivmodhi4_loop>:
 3a4:	aa 1f       	adc	r26, r26
 3a6:	bb 1f       	adc	r27, r27
 3a8:	a6 17       	cp	r26, r22
 3aa:	b7 07       	cpc	r27, r23
 3ac:	10 f0       	brcs	.+4      	; 0x3b2 <__udivmodhi4_ep>
 3ae:	a6 1b       	sub	r26, r22
 3b0:	b7 0b       	sbc	r27, r23

000003b2 <__udivmodhi4_ep>:
 3b2:	88 1f       	adc	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	5a 95       	dec	r21
 3b8:	a9 f7       	brne	.-22     	; 0x3a4 <__udivmodhi4_loop>
 3ba:	80 95       	com	r24
 3bc:	90 95       	com	r25
 3be:	bc 01       	movw	r22, r24
 3c0:	cd 01       	movw	r24, r26
 3c2:	08 95       	ret

000003c4 <eeprom_read_word>:
 3c4:	a8 e1       	ldi	r26, 0x18	; 24
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	42 e0       	ldi	r20, 0x02	; 2
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <eeprom_read_blraw>

000003ce <eeprom_write_word>:
 3ce:	12 d0       	rcall	.+36     	; 0x3f4 <eeprom_write_byte>
 3d0:	27 2f       	mov	r18, r23
 3d2:	11 c0       	rjmp	.+34     	; 0x3f6 <eeprom_write_r18>

000003d4 <eeprom_read_block>:
 3d4:	dc 01       	movw	r26, r24
 3d6:	cb 01       	movw	r24, r22

000003d8 <eeprom_read_blraw>:
 3d8:	fc 01       	movw	r30, r24
 3da:	e1 99       	sbic	0x1c, 1	; 28
 3dc:	fe cf       	rjmp	.-4      	; 0x3da <eeprom_read_blraw+0x2>
 3de:	06 c0       	rjmp	.+12     	; 0x3ec <eeprom_read_blraw+0x14>
 3e0:	ff bb       	out	0x1f, r31	; 31
 3e2:	ee bb       	out	0x1e, r30	; 30
 3e4:	e0 9a       	sbi	0x1c, 0	; 28
 3e6:	31 96       	adiw	r30, 0x01	; 1
 3e8:	0d b2       	in	r0, 0x1d	; 29
 3ea:	0d 92       	st	X+, r0
 3ec:	41 50       	subi	r20, 0x01	; 1
 3ee:	50 40       	sbci	r21, 0x00	; 0
 3f0:	b8 f7       	brcc	.-18     	; 0x3e0 <eeprom_read_blraw+0x8>
 3f2:	08 95       	ret

000003f4 <eeprom_write_byte>:
 3f4:	26 2f       	mov	r18, r22

000003f6 <eeprom_write_r18>:
 3f6:	e1 99       	sbic	0x1c, 1	; 28
 3f8:	fe cf       	rjmp	.-4      	; 0x3f6 <eeprom_write_r18>
 3fa:	1c ba       	out	0x1c, r1	; 28
 3fc:	9f bb       	out	0x1f, r25	; 31
 3fe:	8e bb       	out	0x1e, r24	; 30
 400:	2d bb       	out	0x1d, r18	; 29
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	f8 94       	cli
 406:	e2 9a       	sbi	0x1c, 2	; 28
 408:	e1 9a       	sbi	0x1c, 1	; 28
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	08 95       	ret

00000410 <_exit>:
 410:	f8 94       	cli

00000412 <__stop_program>:
 412:	ff cf       	rjmp	.-2      	; 0x412 <__stop_program>
