
trippling_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000002e4  00000358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  000003e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e64  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bc  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aa0  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  000025f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000526  00000000  00000000  00002748  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000244  00000000  00000000  00002c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002eb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__vector_2>
   6:	4b c0       	rjmp	.+150    	; 0x9e <__vector_3>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	50 c0       	rjmp	.+160    	; 0xb4 <__vector_9>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e4 ee       	ldi	r30, 0xE4	; 228
  32:	f2 e0       	ldi	r31, 0x02	; 2
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a8 37       	cpi	r26, 0x78	; 120
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>
  40:	0f d0       	rcall	.+30     	; 0x60 <main>
  42:	4e c1       	rjmp	.+668    	; 0x2e0 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <initGpioPin>:
 *  @return void
*/
void initGpioPin(void)
{
	// Output pin
	DDRB |= (1 << RELE_LEFT);
  46:	bb 9a       	sbi	0x17, 3	; 23
	PORTB |= (1 << RELE_LEFT);
  48:	c3 9a       	sbi	0x18, 3	; 24
	PORTB &= ~(1 << RELE_LEFT);   // RELE off
  4a:	c3 98       	cbi	0x18, 3	; 24
	
	DDRB |= (1 << RELE_RIGHT);
  4c:	bc 9a       	sbi	0x17, 4	; 23
	PORTB |= (1 << RELE_RIGHT);
  4e:	c4 9a       	sbi	0x18, 4	; 24
	PORTB &= ~(1 << RELE_RIGHT);   // RELE off
  50:	c4 98       	cbi	0x18, 4	; 24
	
	// Input pin
	DDRB &= ~(1 << INPUT_LEFT);    // switch on (INPUT_LEFT)
  52:	ba 98       	cbi	0x17, 2	; 23
	PORTB |= (1 << INPUT_LEFT);    // enable pull-up resistor
  54:	c2 9a       	sbi	0x18, 2	; 24
	
	DDRB &= ~(1 << INPUT_RIGHT);    // switch on (INPUT_LEFT)
  56:	b9 98       	cbi	0x17, 1	; 23
	PORTB |= (1 << INPUT_RIGHT);    // enable pull-up resistor
  58:	c1 9a       	sbi	0x18, 1	; 24
	
	DDRB &= ~(1 << INPUT_SET_BUTTON);    // switch on (INPUT_SET_BUTTON)
  5a:	b8 98       	cbi	0x17, 0	; 23
	PORTB |= (1 << INPUT_SET_BUTTON);    // enable pull-up resistor
  5c:	c0 9a       	sbi	0x18, 0	; 24
  5e:	08 95       	ret

00000060 <main>:
#include "Task.h"
#include "Variable.h"

int main(void)
{
	MCUSR = 0;
  60:	14 be       	out	0x34, r1	; 52
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	f8 94       	cli
  66:	a8 95       	wdr
  68:	81 b5       	in	r24, 0x21	; 33
  6a:	88 61       	ori	r24, 0x18	; 24
  6c:	81 bd       	out	0x21, r24	; 33
  6e:	11 bc       	out	0x21, r1	; 33
  70:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	
	initGpioPin();
  72:	e9 df       	rcall	.-46     	; 0x46 <initGpioPin>
	//initTimer1();
	//initInterrupt();
	//WriteTime(TimeForFlashing); // For manual first init Time 
	ReadTime();
  74:	07 d1       	rcall	.+526    	; 0x284 <ReadTime>
	CheckSetButton();
  76:	e1 d0       	rcall	.+450    	; 0x23a <CheckSetButton>
	
	wdt_reset();
  78:	a8 95       	wdr
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
  7a:	9e e0       	ldi	r25, 0x0E	; 14
  7c:	88 e1       	ldi	r24, 0x18	; 24
  7e:	0f b6       	in	r0, 0x3f	; 63
  80:	f8 94       	cli
  82:	a8 95       	wdr
  84:	81 bd       	out	0x21, r24	; 33
  86:	0f be       	out	0x3f, r0	; 63
  88:	91 bd       	out	0x21, r25	; 33
	wdt_enable(WDTO_1S);
	
	while(1)
	{
		CheckButton();
  8a:	c8 d0       	rcall	.+400    	; 0x21c <CheckButton>
		Flashing();
  8c:	6d d0       	rcall	.+218    	; 0x168 <Flashing>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	8f e0       	ldi	r24, 0x0F	; 15
  90:	97 e2       	ldi	r25, 0x27	; 39
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <main+0x32>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x38>
  98:	00 00       	nop
		_delay_ms(REFRESH_TIME);
		wdt_reset();
  9a:	a8 95       	wdr
  9c:	f6 cf       	rjmp	.-20     	; 0x8a <main+0x2a>

0000009e <__vector_3>:
 *
 *  @param TIMER1_COMPA_vect
 *  @return void
*/
ISR(TIMER1_COMPA_vect)
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
	//PINB |= _BV(PINB4);         //flash the LED by toggling PB4
	TCNT1 = 0;
  a8:	1f bc       	out	0x2f, r1	; 47
}
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <__vector_9>:
 *
 *  @param TIMER1_COMPB_vect
 *  @return void
*/
ISR(TIMER1_COMPB_vect)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
	//PINB |= _BV(PINB3);
}
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <__vector_2>:
 *
 *  @param PCINT0_vect
 *  @return void
*/
ISR(PCINT0_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
	/* GPIO interrupt */
}
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <FlashingLed>:
 *
 *  @param Light - struct with configuration for specific bulb
 *  @return void
*/
void FlashingLed(struct DirectionalLight *Light)
{
  dc:	fc 01       	movw	r30, r24
	if (Light->EnableFlashing == TRUE)
  de:	84 81       	ldd	r24, Z+4	; 0x04
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	09 f0       	breq	.+2      	; 0xe6 <FlashingLed+0xa>
  e4:	40 c0       	rjmp	.+128    	; 0x166 <FlashingLed+0x8a>
	{
		if (Light->CounterFlashing < BLINK_INTERVAL)
  e6:	20 81       	ld	r18, Z
  e8:	23 30       	cpi	r18, 0x03	; 3
  ea:	e8 f5       	brcc	.+122    	; 0x166 <FlashingLed+0x8a>
		{
			Light->TimerCounterFlashing++;
  ec:	81 81       	ldd	r24, Z+1	; 0x01
  ee:	92 81       	ldd	r25, Z+2	; 0x02
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	92 83       	std	Z+2, r25	; 0x02
  f4:	81 83       	std	Z+1, r24	; 0x01
			
			if (Light->StatusFlashing == BULB_ON)
  f6:	33 81       	ldd	r19, Z+3	; 0x03
  f8:	31 30       	cpi	r19, 0x01	; 1
  fa:	b1 f4       	brne	.+44     	; 0x128 <FlashingLed+0x4c>
			{
				if (Light->TimerCounterFlashing > TimeForFlashing)
  fc:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <TimeForFlashing>
 100:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <TimeForFlashing+0x1>
 104:	28 17       	cp	r18, r24
 106:	39 07       	cpc	r19, r25
 108:	70 f5       	brcc	.+92     	; 0x166 <FlashingLed+0x8a>
				{
					Light->TimerCounterFlashing = 0;
 10a:	12 82       	std	Z+2, r1	; 0x02
 10c:	11 82       	std	Z+1, r1	; 0x01
					Light->StatusFlashing = BULB_OFF;
 10e:	13 82       	std	Z+3, r1	; 0x03
					PORTB |= (1 << Light->Led);		// Rele On
 110:	28 b3       	in	r18, 0x18	; 24
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	00 84       	ldd	r0, Z+8	; 0x08
 118:	02 c0       	rjmp	.+4      	; 0x11e <FlashingLed+0x42>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	0a 94       	dec	r0
 120:	e2 f7       	brpl	.-8      	; 0x11a <FlashingLed+0x3e>
 122:	82 2b       	or	r24, r18
 124:	88 bb       	out	0x18, r24	; 24
					return;
 126:	08 95       	ret
				}
			}
			
			if (Light->StatusFlashing == BULB_OFF)
 128:	31 11       	cpse	r19, r1
 12a:	1d c0       	rjmp	.+58     	; 0x166 <FlashingLed+0x8a>
			{
				if (Light->TimerCounterFlashing > TimeForFlashing)
 12c:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <TimeForFlashing>
 130:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <TimeForFlashing+0x1>
 134:	48 17       	cp	r20, r24
 136:	59 07       	cpc	r21, r25
 138:	b0 f4       	brcc	.+44     	; 0x166 <FlashingLed+0x8a>
				{
					Light->TimerCounterFlashing = 0;
 13a:	12 82       	std	Z+2, r1	; 0x02
 13c:	11 82       	std	Z+1, r1	; 0x01
					Light->StatusFlashing = BULB_ON;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	83 83       	std	Z+3, r24	; 0x03
					Light->CounterFlashing++;
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	20 83       	st	Z, r18
					
					if (Light->CounterFlashing == BLINK_INTERVAL)
 146:	23 30       	cpi	r18, 0x03	; 3
 148:	11 f4       	brne	.+4      	; 0x14e <FlashingLed+0x72>
					{
						Light->EnableFlashing = FALSE;
 14a:	14 82       	std	Z+4, r1	; 0x04
						Light->CounterFlashing = 0;
 14c:	10 82       	st	Z, r1
					}
					
					PORTB &= ~(1 << Light->Led);   // Rele Offf
 14e:	28 b3       	in	r18, 0x18	; 24
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	00 84       	ldd	r0, Z+8	; 0x08
 156:	02 c0       	rjmp	.+4      	; 0x15c <FlashingLed+0x80>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	0a 94       	dec	r0
 15e:	e2 f7       	brpl	.-8      	; 0x158 <FlashingLed+0x7c>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	88 bb       	out	0x18, r24	; 24
 166:	08 95       	ret

00000168 <Flashing>:
 *  @param void
 *  @return void
*/
void Flashing(void)
{
	FlashingLed(&DirectionalLightLeft);
 168:	8e e6       	ldi	r24, 0x6E	; 110
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	b7 df       	rcall	.-146    	; 0xdc <FlashingLed>
	FlashingLed(&DirectionalLightRight);
 16e:	84 e6       	ldi	r24, 0x64	; 100
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	b4 df       	rcall	.-152    	; 0xdc <FlashingLed>
 174:	08 95       	ret

00000176 <CheckInput>:
 *
 *  @param Light - struct with configuration for specific input
 *  @return void
*/
void CheckInput(struct DirectionalLight *Button)
{
 176:	fc 01       	movw	r30, r24
	// Check Left
	if (!(PINB & (1 << Button->Button)))
 178:	26 b3       	in	r18, 0x16	; 22
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	01 84       	ldd	r0, Z+9	; 0x09
 17e:	02 c0       	rjmp	.+4      	; 0x184 <CheckInput+0xe>
 180:	35 95       	asr	r19
 182:	27 95       	ror	r18
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <CheckInput+0xa>
 188:	20 fd       	sbrc	r18, 0
 18a:	08 c0       	rjmp	.+16     	; 0x19c <CheckInput+0x26>
	{
		Button->StartTimerCounterUp = TRUE;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	87 83       	std	Z+7, r24	; 0x07
		Button->TimeCountUp++;
 190:	85 81       	ldd	r24, Z+5	; 0x05
 192:	96 81       	ldd	r25, Z+6	; 0x06
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	96 83       	std	Z+6, r25	; 0x06
 198:	85 83       	std	Z+5, r24	; 0x05
 19a:	08 95       	ret
	}
	else
	{
		Button->StartTimerCounterUp = FALSE;
 19c:	17 82       	std	Z+7, r1	; 0x07
	}
	
	if ((Button->EnableFlashing == FALSE) && (Button->StartTimerCounterUp == FALSE))
 19e:	84 81       	ldd	r24, Z+4	; 0x04
 1a0:	88 23       	and	r24, r24
 1a2:	89 f0       	breq	.+34     	; 0x1c6 <CheckInput+0x50>
 1a4:	08 95       	ret
	{
		if ((Button->TimeCountUp > 0) && (Button->TimeCountUp < TimeForEnableAutoFlashing))
 1a6:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <TimeForEnableAutoFlashing>
 1aa:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <TimeForEnableAutoFlashing+0x1>
 1ae:	82 17       	cp	r24, r18
 1b0:	93 07       	cpc	r25, r19
 1b2:	68 f4       	brcc	.+26     	; 0x1ce <CheckInput+0x58>
		{
			Button->EnableFlashing = TRUE;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	84 83       	std	Z+4, r24	; 0x04
			Button->StatusFlashing = BULB_ON;
 1b8:	83 83       	std	Z+3, r24	; 0x03
			Button->TimeCountUp = 0;
 1ba:	16 82       	std	Z+6, r1	; 0x06
 1bc:	15 82       	std	Z+5, r1	; 0x05
			Button->CounterFlashing = 0;
 1be:	10 82       	st	Z, r1
			Button->TimerCounterFlashing = 0;
 1c0:	12 82       	std	Z+2, r1	; 0x02
 1c2:	11 82       	std	Z+1, r1	; 0x01
		}
	}
}
 1c4:	08 95       	ret
		Button->StartTimerCounterUp = FALSE;
	}
	
	if ((Button->EnableFlashing == FALSE) && (Button->StartTimerCounterUp == FALSE))
	{
		if ((Button->TimeCountUp > 0) && (Button->TimeCountUp < TimeForEnableAutoFlashing))
 1c6:	85 81       	ldd	r24, Z+5	; 0x05
 1c8:	96 81       	ldd	r25, Z+6	; 0x06
 1ca:	00 97       	sbiw	r24, 0x00	; 0
 1cc:	61 f7       	brne	.-40     	; 0x1a6 <CheckInput+0x30>
 1ce:	08 95       	ret

000001d0 <SafetyCheck>:
							 FALSE - safety disable is not activate
*/
uint8_t SafetyCheck(void)
{
	/* Safety disable Right bulb */
	if (!(PINB & (1 << INPUT_LEFT)))
 1d0:	b2 99       	sbic	0x16, 2	; 22
 1d2:	0e c0       	rjmp	.+28     	; 0x1f0 <SafetyCheck+0x20>
	{
		if (DirectionalLightRight.EnableFlashing == TRUE)
 1d4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <DirectionalLightRight+0x4>
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	51 f4       	brne	.+20     	; 0x1f0 <SafetyCheck+0x20>
		{
			DirectionalLightRight.TimerCounterFlashing = 0;
 1dc:	e4 e6       	ldi	r30, 0x64	; 100
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	12 82       	std	Z+2, r1	; 0x02
 1e2:	11 82       	std	Z+1, r1	; 0x01
			DirectionalLightRight.StatusFlashing = BULB_ON;
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	93 83       	std	Z+3, r25	; 0x03
			DirectionalLightRight.EnableFlashing = FALSE;
 1e8:	14 82       	std	Z+4, r1	; 0x04
			DirectionalLightRight.CounterFlashing = 0;
 1ea:	10 82       	st	Z, r1
			PORTB &= ~(1 << RELE_RIGHT);   // Rele Offf
 1ec:	c4 98       	cbi	0x18, 4	; 24
			return TRUE;
 1ee:	08 95       	ret
		}
	}
	
	/* Safety disable Left bulb */
	if (!(PINB & (1 << INPUT_RIGHT)))
 1f0:	96 b3       	in	r25, 0x16	; 22
 1f2:	89 2f       	mov	r24, r25
 1f4:	82 70       	andi	r24, 0x02	; 2
 1f6:	91 fd       	sbrc	r25, 1
 1f8:	0f c0       	rjmp	.+30     	; 0x218 <SafetyCheck+0x48>
	{
		if (DirectionalLightLeft.EnableFlashing == TRUE)
 1fa:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <DirectionalLightLeft+0x4>
 1fe:	91 30       	cpi	r25, 0x01	; 1
 200:	61 f4       	brne	.+24     	; 0x21a <SafetyCheck+0x4a>
		{
			DirectionalLightLeft.TimerCounterFlashing = 0;
 202:	ee e6       	ldi	r30, 0x6E	; 110
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	12 82       	std	Z+2, r1	; 0x02
 208:	11 82       	std	Z+1, r1	; 0x01
			DirectionalLightLeft.StatusFlashing = BULB_ON;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	83 83       	std	Z+3, r24	; 0x03
			DirectionalLightLeft.EnableFlashing = FALSE;
 20e:	14 82       	std	Z+4, r1	; 0x04
			DirectionalLightLeft.CounterFlashing = 0;
 210:	10 82       	st	Z, r1
			PORTB &= ~(1 << RELE_LEFT);   // Rele Offf
 212:	c3 98       	cbi	0x18, 3	; 24
			return TRUE;
 214:	89 2f       	mov	r24, r25
 216:	08 95       	ret
		}
	}
	
	return FALSE;
 218:	80 e0       	ldi	r24, 0x00	; 0
}
 21a:	08 95       	ret

0000021c <CheckButton>:
 *  @param void
 *  @return void
*/
void CheckButton(void)
{
	if (SafetyCheck() == FALSE)
 21c:	d9 df       	rcall	.-78     	; 0x1d0 <SafetyCheck>
 21e:	81 11       	cpse	r24, r1
 220:	06 c0       	rjmp	.+12     	; 0x22e <CheckButton+0x12>
	{
		CheckInput(&DirectionalLightLeft);
 222:	8e e6       	ldi	r24, 0x6E	; 110
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	a7 df       	rcall	.-178    	; 0x176 <CheckInput>
		CheckInput(&DirectionalLightRight);
 228:	84 e6       	ldi	r24, 0x64	; 100
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	a4 df       	rcall	.-184    	; 0x176 <CheckInput>
 22e:	08 95       	ret

00000230 <WriteTime>:
 *  @param CycleTime - Value for write to EEPROM
 *  @return void
*/
void WriteTime(uint16_t CycleTime)
{
	eeprom_write_word(EEPROM_TIME_FLASHING, CycleTime);
 230:	bc 01       	movw	r22, r24
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	33 d0       	rcall	.+102    	; 0x29e <eeprom_write_word>
 238:	08 95       	ret

0000023a <CheckSetButton>:
 *  @param void
 *  @return void
*/
void CheckSetButton()
{
	if (!(PINB & (1 << INPUT_SET_BUTTON)))
 23a:	b0 99       	sbic	0x16, 0	; 22
 23c:	22 c0       	rjmp	.+68     	; 0x282 <__stack+0x23>
	{
		uint8_t InitialStatus = (PINB & (1 << INPUT_LEFT));
 23e:	46 b3       	in	r20, 0x16	; 22
 240:	44 70       	andi	r20, 0x04	; 4
		uint16_t BulbStatusCycle = 0;
		uint8_t StartCounter = FALSE;
 242:	60 e0       	ldi	r22, 0x00	; 0
void CheckSetButton()
{
	if (!(PINB & (1 << INPUT_SET_BUTTON)))
	{
		uint8_t InitialStatus = (PINB & (1 << INPUT_LEFT));
		uint16_t BulbStatusCycle = 0;
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
		uint8_t StartCounter = FALSE;
	
		while (1)
		{
			if (InitialStatus != (PINB & (1 << INPUT_LEFT))) 
 248:	50 e0       	ldi	r21, 0x00	; 0
 24a:	71 e0       	ldi	r23, 0x01	; 1
 24c:	01 c0       	rjmp	.+2      	; 0x250 <CheckSetButton+0x16>
 24e:	67 2f       	mov	r22, r23
 250:	26 b3       	in	r18, 0x16	; 22
 252:	24 70       	andi	r18, 0x04	; 4
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	42 17       	cp	r20, r18
 258:	53 07       	cpc	r21, r19
 25a:	41 f0       	breq	.+16     	; 0x26c <__stack+0xd>
			{
				BulbStatusCycle++;
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	ef e0       	ldi	r30, 0x0F	; 15
 260:	f7 e2       	ldi	r31, 0x27	; 39
 262:	31 97       	sbiw	r30, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <__stack+0x3>
 266:	00 c0       	rjmp	.+0      	; 0x268 <__stack+0x9>
 268:	00 00       	nop
 26a:	02 c0       	rjmp	.+4      	; 0x270 <__stack+0x11>
				StartCounter = TRUE;
				_delay_ms(REFRESH_TIME);
			}
			
			if ((StartCounter == TRUE) && (InitialStatus == (PINB & (1 << INPUT_LEFT))))
 26c:	61 30       	cpi	r22, 0x01	; 1
 26e:	81 f7       	brne	.-32     	; 0x250 <CheckSetButton+0x16>
 270:	26 b3       	in	r18, 0x16	; 22
 272:	24 70       	andi	r18, 0x04	; 4
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	42 17       	cp	r20, r18
 278:	53 07       	cpc	r21, r19
 27a:	49 f7       	brne	.-46     	; 0x24e <CheckSetButton+0x14>
			{
				WriteTime(BulbStatusCycle);
 27c:	d9 df       	rcall	.-78     	; 0x230 <WriteTime>
				while(1)
				{
					wdt_reset();
 27e:	a8 95       	wdr
 280:	fe cf       	rjmp	.-4      	; 0x27e <__stack+0x1f>
 282:	08 95       	ret

00000284 <ReadTime>:
 *  @param void
 *  @return void
*/
void ReadTime(void)
{
	TimeForFlashing = eeprom_read_word(EEPROM_TIME_FLASHING);
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	05 d0       	rcall	.+10     	; 0x294 <eeprom_read_word>
 28a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <TimeForFlashing+0x1>
 28e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <TimeForFlashing>
 292:	08 95       	ret

00000294 <eeprom_read_word>:
 294:	a8 e1       	ldi	r26, 0x18	; 24
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	42 e0       	ldi	r20, 0x02	; 2
 29a:	50 e0       	ldi	r21, 0x00	; 0
 29c:	05 c0       	rjmp	.+10     	; 0x2a8 <eeprom_read_blraw>

0000029e <eeprom_write_word>:
 29e:	12 d0       	rcall	.+36     	; 0x2c4 <eeprom_write_byte>
 2a0:	27 2f       	mov	r18, r23
 2a2:	11 c0       	rjmp	.+34     	; 0x2c6 <eeprom_write_r18>

000002a4 <eeprom_read_block>:
 2a4:	dc 01       	movw	r26, r24
 2a6:	cb 01       	movw	r24, r22

000002a8 <eeprom_read_blraw>:
 2a8:	fc 01       	movw	r30, r24
 2aa:	e1 99       	sbic	0x1c, 1	; 28
 2ac:	fe cf       	rjmp	.-4      	; 0x2aa <eeprom_read_blraw+0x2>
 2ae:	06 c0       	rjmp	.+12     	; 0x2bc <eeprom_read_blraw+0x14>
 2b0:	ff bb       	out	0x1f, r31	; 31
 2b2:	ee bb       	out	0x1e, r30	; 30
 2b4:	e0 9a       	sbi	0x1c, 0	; 28
 2b6:	31 96       	adiw	r30, 0x01	; 1
 2b8:	0d b2       	in	r0, 0x1d	; 29
 2ba:	0d 92       	st	X+, r0
 2bc:	41 50       	subi	r20, 0x01	; 1
 2be:	50 40       	sbci	r21, 0x00	; 0
 2c0:	b8 f7       	brcc	.-18     	; 0x2b0 <eeprom_read_blraw+0x8>
 2c2:	08 95       	ret

000002c4 <eeprom_write_byte>:
 2c4:	26 2f       	mov	r18, r22

000002c6 <eeprom_write_r18>:
 2c6:	e1 99       	sbic	0x1c, 1	; 28
 2c8:	fe cf       	rjmp	.-4      	; 0x2c6 <eeprom_write_r18>
 2ca:	1c ba       	out	0x1c, r1	; 28
 2cc:	9f bb       	out	0x1f, r25	; 31
 2ce:	8e bb       	out	0x1e, r24	; 30
 2d0:	2d bb       	out	0x1d, r18	; 29
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	e2 9a       	sbi	0x1c, 2	; 28
 2d8:	e1 9a       	sbi	0x1c, 1	; 28
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	08 95       	ret

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
